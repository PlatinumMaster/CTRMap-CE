package ctrmap.util.tools.cont;

import ctrmap.formats.pokemon.containers.DefaultGamefreakContainer;
import ctrmap.formats.pokemon.containers.GFContainer;
import xstandard.fs.FSFile;
import xstandard.fs.accessors.DiskFile;
import xstandard.gui.DialogUtils;
import xstandard.gui.file.XFileDialog;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.io.File;
import java.io.IOException;
import java.util.List;
import javax.swing.JFrame;
import xstandard.gui.components.ComponentUtils;

public class ContainerUtil extends javax.swing.JFrame {

	private AGFCContentIdentifier contentId = new DummyContentIdentifier();
	private GFContainer currentCont;

	/**
	 * Creates new form ContainerUtil
	 */
	public ContainerUtil() {
		initComponents();

		fileListSP.getVerticalScrollBar().setUnitIncrement(8);

		setDropTarget(new DropTarget() {
			@Override
			public synchronized void drop(DropTargetDropEvent evt) {
				if (evt.isDataFlavorSupported(DataFlavor.javaFileListFlavor)) {
					try {
						evt.acceptDrop(DnDConstants.ACTION_COPY);
						List<File> droppedFiles = (List<File>) evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
						if (!droppedFiles.isEmpty()) {
							File f = droppedFiles.get(0);

							openFileInternal(new DiskFile(f));
						}
					} catch (UnsupportedFlavorException | IOException ex) {
						DialogUtils.showExceptionTraceDialog(ex);
					}
				}
			}
		});
	}

	private void openFileInternal(FSFile f) {
		fileList.clear();
		GFContainer cnt = new DefaultGamefreakContainer(f);
		openContInternal(cnt);
	}

	private void openContInternal(GFContainer cnt) {
		if (cnt == null) {
			DialogUtils.showErrorMessage(this, "Illegal input", "This is not a valid Abstract Game Freak Container!");
		} else {
			currentCont = cnt;
			fileList.clear();
			for (int i = 0; i < cnt.getFileCount(); i++) {
				insertViewForIndex(cnt, i);
			}
			if (btnSafeMode.isSelected()) {
				cnt.makeMemoryHandle();
			}
			setSafeModeButtonsEnabled(false);
		}
	}

	void insertViewForIndex(GFContainer cont, int index) {
		ContFileView view = new ContFileView(this, cont, index);
		int count = fileList.getElementCount();
		if (index < count) {
			for (int i = index; i < count; i++) {
				fileList.getElementAt(i).incrementIndex(1);
			}
		}
		fileList.addElement(index, view);
	}

	void removeViewForIndex(GFContainer cont, int index) {
		if (index < fileList.getElementCount()) {
			fileList.removeElement(fileList.getElementAt(index));
			for (int i = index; i < fileList.getElementCount(); i++) {
				fileList.getElementAt(i).incrementIndex(-1);
			}
		}
	}

	AGFCContentIdentifier getContentIdentifier() {
		return contentId;
	}

	public void setContentIdentifier(AGFCContentIdentifier contentId) {
		this.contentId = contentId == null ? new DummyContentIdentifier() : contentId;
	}

	public void triggerUnsavedChanges() {
		if (btnSafeMode.isSelected()) {
			setSafeModeButtonsEnabled(true);
		}
	}

	private void setSafeModeButtonsEnabled(boolean enabled) {
		ComponentUtils.setComponentsEnabled(enabled, btnApplySafeModeChanges, btnDiscardSafeModeChanges);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
	 * code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnOpenCont = new javax.swing.JButton();
        fileListSP = new javax.swing.JScrollPane();
        fileList = new xstandard.gui.components.ComponentList<>();
        btnNewContainer = new javax.swing.JButton();
        btnSafeMode = new javax.swing.JCheckBox();
        btnApplySafeModeChanges = new javax.swing.JButton();
        btnDiscardSafeModeChanges = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("AGFCUtil EX");
        setLocationByPlatform(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        btnOpenCont.setText("Open");
        btnOpenCont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenContActionPerformed(evt);
            }
        });

        fileList.setLayout(new javax.swing.BoxLayout(fileList, javax.swing.BoxLayout.PAGE_AXIS));
        fileListSP.setViewportView(fileList);

        btnNewContainer.setText("Create new");
        btnNewContainer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewContainerActionPerformed(evt);
            }
        });

        btnSafeMode.setText("Safe mode");
        btnSafeMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSafeModeActionPerformed(evt);
            }
        });

        btnApplySafeModeChanges.setForeground(new java.awt.Color(51, 204, 0));
        btnApplySafeModeChanges.setText("✓");
        btnApplySafeModeChanges.setToolTipText("Apply changes");
        btnApplySafeModeChanges.setEnabled(false);
        btnApplySafeModeChanges.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnApplySafeModeChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplySafeModeChangesActionPerformed(evt);
            }
        });

        btnDiscardSafeModeChanges.setForeground(new java.awt.Color(255, 0, 0));
        btnDiscardSafeModeChanges.setText("✗");
        btnDiscardSafeModeChanges.setToolTipText("Discard changes");
        btnDiscardSafeModeChanges.setEnabled(false);
        btnDiscardSafeModeChanges.setMargin(new java.awt.Insets(2, 4, 2, 4));
        btnDiscardSafeModeChanges.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDiscardSafeModeChangesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fileListSP)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnOpenCont)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNewContainer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 189, Short.MAX_VALUE)
                        .addComponent(btnSafeMode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnApplySafeModeChanges)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnDiscardSafeModeChanges)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fileListSP, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOpenCont)
                    .addComponent(btnNewContainer)
                    .addComponent(btnSafeMode)
                    .addComponent(btnApplySafeModeChanges)
                    .addComponent(btnDiscardSafeModeChanges))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenContActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenContActionPerformed
		FSFile cfile = XFileDialog.openFileDialog();
		if (cfile != null && cfile.exists()) {
			if (!cfile.isDirectory()) {
				openFileInternal(cfile);
			} else {
				DialogUtils.showErrorMessage("Illegal input", "Source can not be a directory.");
			}
		}
    }//GEN-LAST:event_btnOpenContActionPerformed

    private void btnNewContainerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewContainerActionPerformed
		NewContainerDialog dlg = new NewContainerDialog(this, true);
		dlg.setLocationRelativeTo(this);
		dlg.setVisible(true);
		if (dlg.getResult() != null) {
			openContInternal(dlg.getResult());
		}
    }//GEN-LAST:event_btnNewContainerActionPerformed

    private void btnApplySafeModeChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplySafeModeChangesActionPerformed
		if (currentCont != null && currentCont.hasMemoryHandle()) {
			currentCont.flushMemoryHandle();
			setSafeModeButtonsEnabled(false);
		}
    }//GEN-LAST:event_btnApplySafeModeChangesActionPerformed

    private void btnDiscardSafeModeChangesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDiscardSafeModeChangesActionPerformed
		if (currentCont != null) {
			currentCont.deleteMemoryHandle();
			setSafeModeButtonsEnabled(false);
			openContInternal(currentCont);
		}
    }//GEN-LAST:event_btnDiscardSafeModeChangesActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
		if (currentCont != null && btnApplySafeModeChanges.isEnabled()) {
			if (DialogUtils.showYesNoDialog(this, "Save changes?", "There are unsaved changes. Would you like to apply them\nbefore exiting?")) {
				currentCont.flushMemoryHandle();
				currentCont.deleteMemoryHandle();
			}
		}
		dispose();
    }//GEN-LAST:event_formWindowClosing

    private void btnSafeModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSafeModeActionPerformed
		if (currentCont != null) {
			if (!btnSafeMode.isSelected()) { //was unselected
				if (btnApplySafeModeChanges.isEnabled()) {
					DialogUtils.showErrorMessage(this, "Unhandled changes", "Some changes were made to the container whilst in safe mode.\nPlease apply or discard them first.");
					btnSafeMode.setSelected(true);
				}
				else {
					currentCont.deleteMemoryHandle();
				}
			}
			else {
				currentCont.makeMemoryHandle();
			}
		}
    }//GEN-LAST:event_btnSafeModeActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		ComponentUtils.setSystemNativeLookAndFeel();

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				ContainerUtil u = new ContainerUtil();
				u.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
				u.setLocationRelativeTo(null);
				u.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApplySafeModeChanges;
    private javax.swing.JButton btnDiscardSafeModeChanges;
    private javax.swing.JButton btnNewContainer;
    private javax.swing.JButton btnOpenCont;
    private javax.swing.JCheckBox btnSafeMode;
    private xstandard.gui.components.ComponentList<ContFileView> fileList;
    private javax.swing.JScrollPane fileListSP;
    // End of variables declaration//GEN-END:variables

	private static class DummyContentIdentifier implements AGFCContentIdentifier {

		@Override
		public AGFCIdentifyResult identify(byte[] data, GFContainer cont, int fileIndex) {
			AGFCIdentifyResult r = new AGFCIdentifyResult();
			r.contentType = null;
			r.index = fileIndex;
			r.guessMagic(data);
			return r;
		}
	}
}
