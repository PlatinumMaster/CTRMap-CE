package ctrmap.util.gui;

import rtldr.JAbstractPluginDatabase;
import xstandard.formats.zip.ZipArchive;
import xstandard.fs.FSFile;
import xstandard.gui.DialogUtils;
import xstandard.gui.file.CommonExtensionFilters;
import xstandard.gui.file.XFileDialog;

public class PluginManagementPanel extends javax.swing.JPanel {

	private JAbstractPluginDatabase db;
	private Listener listener;
	
	public PluginManagementPanel() {
		initComponents();
		pluginsSP.getVerticalScrollBar().setUnitIncrement(15);
	}
	
	public void setListener(Listener l) {
		this.listener = l;
	}
	
	public void setPluginDB(JAbstractPluginDatabase db) {
		this.db = db;
		pluginList.clear();
		for (JAbstractPluginDatabase.PluginEntry e : db.getPlugins()) {
			pluginList.addElement(new PluginEntryUI(e, this));
			if (listener != null) {
				listener.onPluginAdded(e);
			}
		}
	}
	
	public void removePluginEntryAction(PluginEntryUI e) {
		pluginList.removeElement(e);
		db.removePlugin(e.plugin.name);
		if (listener != null) {
			listener.onPluginRemoved(e.plugin);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
	 * code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnAddPluginJAR = new javax.swing.JButton();
        pluginsSP = new javax.swing.JScrollPane();
        pluginList = new xstandard.gui.components.ComponentList<>();

        btnAddPluginJAR.setText("Install plug-in");
        btnAddPluginJAR.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddPluginJARActionPerformed(evt);
            }
        });

        pluginsSP.setViewportView(pluginList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 254, Short.MAX_VALUE)
                .addComponent(btnAddPluginJAR))
            .addComponent(pluginsSP)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pluginsSP, javax.swing.GroupLayout.DEFAULT_SIZE, 196, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnAddPluginJAR))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddPluginJARActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddPluginJARActionPerformed
        FSFile jar = XFileDialog.openFileDialog("Select a plug-in JAR file", CommonExtensionFilters.JAR);
        if (jar != null && ZipArchive.isZip(jar)) {
            String name = jar.getName();
            if (!db.hasPlugin(name)) {
                JAbstractPluginDatabase.PluginEntry plg = db.addPluginPath(jar.getName(), jar.getPath());
                pluginList.addElement(new PluginEntryUI(plg, this));
				if (listener != null) {
					listener.onPluginAdded(plg);
				}
            } else {
                DialogUtils.showErrorMessage(this, "Duplicate plugin", "A plugin with name " + jar.getName() + " is already registered.");
            }
        }
    }//GEN-LAST:event_btnAddPluginJARActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddPluginJAR;
    private xstandard.gui.components.ComponentList<PluginEntryUI> pluginList;
    private javax.swing.JScrollPane pluginsSP;
    // End of variables declaration//GEN-END:variables

	public static interface Listener {
		public void onPluginAdded(JAbstractPluginDatabase.PluginEntry plugin);
		public void onPluginRemoved(JAbstractPluginDatabase.PluginEntry plugin);
	}
}
