package ctrmap.util.gui;

import ctrmap.renderer.scene.animation.AbstractAnimationController;
import xstandard.gui.components.JSliderUtils;
import xstandard.gui.components.listeners.ToggleableChangeListener;
import xstandard.math.MathEx;
import javax.swing.border.TitledBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class AnimationControl extends javax.swing.JPanel {

	public AbstractAnimationController controller;
	private int lastFC = -1;

	private ToggleableChangeListener timelineListener = new ToggleableChangeListener() {
		@Override
		public void onApprovedStateChange(ChangeEvent e) {
			if (controller != null) {
				controller.frame = timeline.getValue();
			}
		}
	};

	public AnimationControl() {
		this(null);
	}

	public AnimationControl(AbstractAnimationController anmCnt) {
		initComponents();
		changeController(anmCnt);
		JSliderUtils.snapToMouseClick(timeline);

		speedSlider.addChangeListener(new ChangeListener() {
			@Override
			public void stateChanged(ChangeEvent e) {
				if (controller != null) {
					float val = speedSlider.getValue() / 100f;
					if (val <= 0.5f) {
						val = 0.1f + (val / 0.5f) * 0.9f;
					} else {
						val = (val - 0.5f) * 20f;
					}
					val *= Math.signum(controller.speedMultiplier);
					controller.speedMultiplier = val;
				}
			}
		});

		timeline.addChangeListener(timelineListener);
	}

	public final void changeController(AbstractAnimationController anmCnt) {
		this.controller = anmCnt;
		updateMain();
	}

	public void forceSpeedSlider(int value) {
		speedSlider.setValue(value);
	}

	private void updateMain() {
		int fc;
		String title = "-No animation playing-";
		if (controller != null && controller.anim != null) {
			title = controller.anim.name;
			fc = (int) Math.ceil(controller.anim.frameCount);
		} else {
			fc = 30;
		}
		((TitledBorder) getBorder()).setTitle(title);

		if (fc != lastFC) {
			timeline.setMaximum(fc);
			timeline.setMajorTickSpacing(Math.max(1, MathEx.padInteger((int) (fc / 10), 10)));
			timeline.setLabelTable(timeline.createStandardLabels(timeline.getMajorTickSpacing()));
			lastFC = fc;
		}

		repaint();
	}

	public void update() {
		updateMain();
		int timelineVal = -1;
		if (controller != null) {
			if (!controller.paused()) {
				timelineVal = Math.round(controller.frame);
			}
		} else {
			timelineVal = 0;
		}
		if (timelineVal != -1) {
			timelineListener.setAllowEvents(false);
			timeline.setValue(timelineVal);
			timelineListener.setAllowEvents(true);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timeline = new javax.swing.JSlider();
        btnPlay = new javax.swing.JButton();
        btnPause = new javax.swing.JButton();
        btnRestart = new javax.swing.JButton();
        speedLabel = new javax.swing.JLabel();
        speedSlider = new javax.swing.JSlider();
        btnClearSpeed = new javax.swing.JButton();
        btnInvPlay = new javax.swing.JButton();

        setBorder(javax.swing.BorderFactory.createTitledBorder("-No animation playing-"));

        timeline.setMajorTickSpacing(10);
        timeline.setMinorTickSpacing(1);
        timeline.setPaintLabels(true);
        timeline.setPaintTicks(true);
        timeline.setValue(0);

        btnPlay.setForeground(new java.awt.Color(0, 204, 0));
        btnPlay.setText("▶");
        btnPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPlayActionPerformed(evt);
            }
        });

        btnPause.setForeground(new java.awt.Color(0, 0, 255));
        btnPause.setText("||");
        btnPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPauseActionPerformed(evt);
            }
        });

        btnRestart.setForeground(new java.awt.Color(204, 0, 0));
        btnRestart.setText("↺");
        btnRestart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRestartActionPerformed(evt);
            }
        });

        speedLabel.setText("Speed:");

        btnClearSpeed.setText("•");
        btnClearSpeed.setMargin(new java.awt.Insets(1, 3, 3, 3));
        btnClearSpeed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSpeedActionPerformed(evt);
            }
        });

        btnInvPlay.setForeground(new java.awt.Color(255, 0, 0));
        btnInvPlay.setText("◀");
        btnInvPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInvPlayActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(timeline, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(speedLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClearSpeed))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnInvPlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPause)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPlay)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnRestart))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(timeline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPlay)
                    .addComponent(btnPause)
                    .addComponent(btnRestart)
                    .addComponent(btnInvPlay))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(speedSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClearSpeed, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(speedLabel)))
        );
    }// </editor-fold>//GEN-END:initComponents

	public void callClearSpeed() {
		controller.speedMultiplier = Math.signum(controller.speedMultiplier);
		speedSlider.setValue(50);
	}

    private void btnClearSpeedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSpeedActionPerformed
		callClearSpeed();
    }//GEN-LAST:event_btnClearSpeedActionPerformed

    private void btnPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPauseActionPerformed
		controller.pauseAnimation();
    }//GEN-LAST:event_btnPauseActionPerformed

    private void btnRestartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRestartActionPerformed
		controller.restartAnimation();
    }//GEN-LAST:event_btnRestartActionPerformed

	public void callPlay() {
		controller.resumeAnimation();
		if (controller.speedMultiplier < 0f) {
			controller.speedMultiplier *= -1f;
		}
	}

	public void callInvPlay() {
		controller.resumeAnimation();
		if (controller.speedMultiplier > 0f) {
			controller.speedMultiplier *= -1f;
		}
	}

    private void btnPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPlayActionPerformed
		callPlay();
    }//GEN-LAST:event_btnPlayActionPerformed

    private void btnInvPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInvPlayActionPerformed
		callInvPlay();
    }//GEN-LAST:event_btnInvPlayActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClearSpeed;
    private javax.swing.JButton btnInvPlay;
    private javax.swing.JButton btnPause;
    private javax.swing.JButton btnPlay;
    private javax.swing.JButton btnRestart;
    private javax.swing.JLabel speedLabel;
    private javax.swing.JSlider speedSlider;
    private javax.swing.JSlider timeline;
    // End of variables declaration//GEN-END:variables
}
