package ctrmap.editor.gui.workspace;

import xstandard.gui.file.XFileDialog;
import ctrmap.editor.system.workspace.CTRMapProject;
import xstandard.fs.FSFile;
import xstandard.fs.accessors.DiskFile;
import xstandard.gui.DialogUtils;
import xstandard.gui.components.listeners.DocumentAdapterEx;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;

public class AddProjectDialog extends javax.swing.JDialog {

	private DefaultComboBoxModel<String> games = new DefaultComboBoxModel<>();

	private List<OnProjectAddSuccessListener> listeners = new ArrayList<>();

	public AddProjectDialog(java.awt.Frame parent, boolean modal, Collection<String> games) {
		super(parent, modal);
		initComponents();
		for (String game : games) {
			this.games.addElement(game);
		}
		gameList.setModel(this.games);
		
		projectPath.getDocument().addDocumentListener(new DocumentAdapterEx() {
			@Override
			public void textChangedUpdate(DocumentEvent e) {
				btnCreateProject.setEnabled(!projectPath.getText().trim().isEmpty());
			}
		});
	}

	public void addOnProjectAddListener(OnProjectAddSuccessListener l) {
		listeners.add(l);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        projectPathLabel = new javax.swing.JLabel();
        projectPath = new javax.swing.JTextField();
        btnBrowseProjectPath = new javax.swing.JButton();
        gamePathLabel = new javax.swing.JLabel();
        gameList = new javax.swing.JComboBox<>();
        btnCreateProject = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create a project");

        projectPathLabel.setText("Project path");

        btnBrowseProjectPath.setText("Browse");
        btnBrowseProjectPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseProjectPathActionPerformed(evt);
            }
        });

        gamePathLabel.setText("Game path");
        gamePathLabel.setToolTipText("");

        btnCreateProject.setText("Initialize Project");
        btnCreateProject.setEnabled(false);
        btnCreateProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateProjectActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(gameList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(projectPath)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBrowseProjectPath))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(projectPathLabel)
                            .addComponent(gamePathLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 315, Short.MAX_VALUE)
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCreateProject)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(projectPathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(projectPath, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseProjectPath))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(gamePathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(gameList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateProject)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowseProjectPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseProjectPathActionPerformed
		String path = projectPath.getText();
		FSFile projectDir = XFileDialog.openDirectoryDialog("Select a target project directory", (path == null || path.trim().isEmpty()) ? null : new DiskFile(path));
		if (projectDir != null) {
			projectPath.setText(projectDir.getPath());
		}
    }//GEN-LAST:event_btnBrowseProjectPathActionPerformed

    private void btnCreateProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateProjectActionPerformed
		String path = projectPath.getText().trim();

		FSFile target = new DiskFile(path);
		if (target.getChildCount() > 0) {
			if (!DialogUtils.showYesNoWarningDialog(this, "Directory not empty", "The target directory is not empty. Do you still wish to use it as the project root?")) {
				return;
			}
		}
		target.mkdirs();
		if (!target.exists()) {
			JOptionPane.showMessageDialog(this, "Directory access denied.", "Permission error", JOptionPane.ERROR_MESSAGE);
			return;
		} else {
			FSFile cmproj = CTRMapProject.initProject(target, games.getElementAt(gameList.getSelectedIndex()));
			for (OnProjectAddSuccessListener l : listeners) {
				l.onProjectAddSuccess(cmproj);
			}
			dispose();
		}
    }//GEN-LAST:event_btnCreateProjectActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
		dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseProjectPath;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCreateProject;
    private javax.swing.JComboBox<String> gameList;
    private javax.swing.JLabel gamePathLabel;
    private javax.swing.JTextField projectPath;
    private javax.swing.JLabel projectPathLabel;
    // End of variables declaration//GEN-END:variables

	public static interface OnProjectAddSuccessListener {

		public void onProjectAddSuccess(FSFile resultProjectFile);
	}
}
