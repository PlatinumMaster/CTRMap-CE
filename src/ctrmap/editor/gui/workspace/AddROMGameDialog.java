package ctrmap.editor.gui.workspace;

import xstandard.gui.file.XFileDialog;
import ctrmap.formats.common.GameInfo;
import xstandard.fs.accessors.DiskFile;
import ctrmap.editor.system.workspace.GameDetector;
import ctrmap.formats.ntr.rom.srl.NDSROM;
import xstandard.fs.FSFile;
import xstandard.fs.FSUtil;
import xstandard.gui.DialogUtils;
import xstandard.gui.LoadingDialog;
import xstandard.gui.SwingWorkerUtils;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import javax.swing.SwingWorker;

public class AddROMGameDialog extends javax.swing.JDialog {

	private final List<OnGameAddSuccessListener> listeners = new ArrayList<>();
	private final List<CanAddGameVerifier> verifiers = new ArrayList<>();

	public AddROMGameDialog(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		setLocationRelativeTo(parent);
	}

	public void addOnGameAddSuccessListener(OnGameAddSuccessListener l) {
		listeners.add(l);
	}

	public void addCanAddGameVerifier(CanAddGameVerifier v) {
		verifiers.add(v);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pathLabel = new javax.swing.JLabel();
        pathField = new javax.swing.JTextField();
        btnBrowseGameDir = new javax.swing.JButton();
        btnConfirm = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        btnBrowseROM = new javax.swing.JButton();
        romPathField = new javax.swing.JTextField();
        romPathLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Add a ROM game directory");
        setResizable(false);

        pathLabel.setText("Extracted game data root path");

        btnBrowseGameDir.setText("Browse");
        btnBrowseGameDir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseGameDirActionPerformed(evt);
            }
        });

        btnConfirm.setText("Confirm");
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnBrowseROM.setText("Browse");
        btnBrowseROM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseROMActionPerformed(evt);
            }
        });

        romPathLabel.setText("Source ROM path");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(romPathField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBrowseROM))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnConfirm))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pathField)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnBrowseGameDir))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(romPathLabel)
                            .addComponent(pathLabel))
                        .addGap(0, 234, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(romPathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(romPathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseROM))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pathLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBrowseGameDir))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirm)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
		dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
		String gamePath = pathField.getText();
		FSFile gameRoot = new DiskFile(gamePath);
		if (gameRoot.getParent().exists()) {
			for (CanAddGameVerifier v : verifiers) {
				if (!v.verifyGamePath(gamePath)) {
					return;
				}
			}
			if (gameRoot.isFile()) {
				DialogUtils.showErrorMessage(this, "Directory error", "The extracted game directory can not be a file (duh).");
				return;
			}
			gameRoot.mkdir();
			String romPath = romPathField.getText();

			DiskFile romFile = new DiskFile(romPath);
			if (!romFile.isFile()) {
				DialogUtils.showErrorMessage(this, "ROM file not found", "The input ROM file either does not exist or is a directory.");
				return;
			}

			LoadingDialog romExtractDlg = new LoadingDialog(this, true, "The ROM is being extracted, please wait...");
			romExtractDlg.setProgressBarIsFake(true);
			SwingWorker<Boolean, Boolean> worker = SwingWorkerUtils.executeJobCallable((() -> {
				try {
					NDSROM.extractROM(romFile, gameRoot);
					romExtractDlg.closeNonAWT();
					return true;
				} catch (IOException ex) {
					throw new ExecutionException(ex);
				}
			}));
			romExtractDlg.setVisible(true);
			try {
				worker.get();
			} catch (InterruptedException | ExecutionException ex) {
				DialogUtils.showErrorMessage(this, "Failed to extract ROM", "ROM extraction was unsuccesful. Check console output for error details.\n(" + ex.getMessage() + ")");
				ex.printStackTrace();
				romExtractDlg.setVisible(false);
				return;
			}
			romExtractDlg.setVisible(false);

			GameInfo.Game game = GameDetector.detectGameType(gameRoot);
			if (game == null) {
				DialogUtils.showErrorMessage(this, "Invalid path", "The ROM is not a recognizable Gen 5 game (" + GameDetector.getFourCC(gameRoot) + ")");
			} else {
				for (OnGameAddSuccessListener l : listeners) {
					l.onGameAdded(gamePath);
				}
				dispose();
			}
		} else {
			DialogUtils.showErrorMessage(this, "Invalid path", "The parent of the extraction directory does not exist");
		}
    }//GEN-LAST:event_btnConfirmActionPerformed

	private boolean isExtractPathUserSelected = false;
	
    private void btnBrowseGameDirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseGameDirActionPerformed
		String path = pathField.getText();
		FSFile select = XFileDialog.openDirectoryDialog("Select the location for the extracted ROM data", (path == null || path.trim().isEmpty()) ? null : new DiskFile(pathField.getText()));
		if (select != null) {
			path = select.getPath();
			pathField.setText(path);
			isExtractPathUserSelected = true;
		}
    }//GEN-LAST:event_btnBrowseGameDirActionPerformed

    private void btnBrowseROMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseROMActionPerformed
		String path = romPathField.getText();
		String name = FSUtil.getFileName(path);
		String parentPath = FSUtil.getParentFilePath(path);
		FSFile select;
		if (!name.isEmpty()) {
			select = XFileDialog.openFileDialog("Select the location of the input ROM", false, new DiskFile(parentPath), name, NDSROM.EXTENSION_FILTER);
		} else {
			select = XFileDialog.openFileDialog("Select the location of the input ROM", NDSROM.EXTENSION_FILTER);
		}
		if (select != null) {
			romPathField.setText(path = select.getPath());
			if (!isExtractPathUserSelected) {
				pathField.setText(FSUtil.getParentFilePath(path) + "/" + FSUtil.getFileNameWithoutExtension(path) + "_Extracted");
			}
		}
    }//GEN-LAST:event_btnBrowseROMActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowseGameDir;
    private javax.swing.JButton btnBrowseROM;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JTextField pathField;
    private javax.swing.JLabel pathLabel;
    private javax.swing.JTextField romPathField;
    private javax.swing.JLabel romPathLabel;
    // End of variables declaration//GEN-END:variables
}
