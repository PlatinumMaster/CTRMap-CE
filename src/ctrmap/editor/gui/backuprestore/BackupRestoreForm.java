package ctrmap.editor.gui.backuprestore;

import ctrmap.editor.CTRMap;
import ctrmap.editor.system.workspace.backup.ProjectBackupConfig;
import xstandard.fs.FSFile;
import xstandard.gui.DialogUtils;
import xstandard.gui.LoadingDialog;
import xstandard.gui.SwingWorkerUtils;
import xstandard.text.FormattingUtils;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import javax.swing.SwingUtilities;
import javax.swing.Timer;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class BackupRestoreForm extends javax.swing.JFrame {

	private CTRMap cm;
	private Timer playtimeUpdateTimer = new Timer(500, null);

	public BackupRestoreForm(CTRMap cm) {
		initComponents();
		this.cm = cm;

		ProjectBackupConfig bkCfg = cm.getProject().backupCfg;

		bkCfg.sortBackupInfosDateDescending();

		for (ProjectBackupConfig.BackupInfo bi : bkCfg.backupInfos) {
			backupList.addElement(new BackupEntry(bi, this));
		}

		btnEnableAutoBackup.setSelected(bkCfg.backupPeriod != 0);
		backupPeriodSelector.setMillisValue(bkCfg.backupPeriod);

		playtimeUpdateTimer.addActionListener(((e) -> {
			updatePlaytime();
		}));

		backupPeriodSelector.addChangeListener(new ChangeListener() {
			@Override
			public void stateChanged(ChangeEvent e) {
				cm.getProject().backupCfg.backupPeriod = backupPeriodSelector.getSelectedMillisValue();
				cm.getProject().saveProjectData();
			}
		});

		backupListSP.getVerticalScrollBar().setUnitIncrement(20);

		setAutoBkUpEnabled();
	}

	public void setAutoBkUpEnabled() {
		backupPeriodSelector.setEnabled(btnEnableAutoBackup.isSelected());
		if (btnEnableAutoBackup.isSelected()) {
			if (backupPeriodSelector.getSelectedMinuteValue() <= 0) {
				backupPeriodSelector.setHourValue(1);
			}
		}
		else {
			backupPeriodSelector.setHourValue(0);
		}
	}

	public void updatePlaytime() {
		if (cm.getProject() != null) {
			curPlaytime.setText(FormattingUtils.getFormatMillisToHMS(cm.getProject().getPlaytime()));
		}
	}

	@Override
	public void setVisible(boolean val) {
		updatePlaytime();
		setLocationRelativeTo(cm);
		super.setVisible(val);
		if (val) {
			playtimeUpdateTimer.start();
		} else {
			playtimeUpdateTimer.stop();
		}
	}

	public void restoreBackupEntryAction(BackupEntry e) {
		if (DialogUtils.showYesNoDialog(this, "Restore backup", "Would you like to backup the current data first?")) {
			if (!createNewBackup()) {
				return;
			}
		}

		LoadingDialog ld = new LoadingDialog(this, true, "Restoring backup...");
		ld.setProgressBarIsFake(true);
		SwingWorkerUtils.executeJob((() -> {
			cm.getBackupSystem().restoreBackup(e.backupInfo);
			SwingUtilities.invokeLater((() -> {
				ld.setVisible(false);
			}));
		}));
		ld.setVisible(true);
	}

	public void removeBackupEntryAction(BackupEntry e) {
		if (DialogUtils.showYesNoDialog(this, "Are you sure?", "This backup will be permanently lost. Continue?")) {
			removeBackupEntriesImpl(e);
		}
	}

	private void removeBackupEntriesImpl(BackupEntry... entries) {
		for (BackupEntry e : entries) {
			backupList.removeElement(e);
			cm.getProject().backupCfg.backupInfos.remove(e.backupInfo);
			FSFile backup = cm.getProject().getBackupRoot().getChild(e.backupInfo.path);
			if (backup.exists()) {
				backup.delete();
			}
		}
		cm.getProject().saveProjectData();
	}

	public boolean createNewBackup() {
		BackupNameEntryDialog nameEntry = new BackupNameEntryDialog(this, true, cm.getProject().getBackupRoot());
		nameEntry.setVisible(true);
		String result = nameEntry.getResult();
		if (result != null) {
			LoadingDialog ld = new LoadingDialog(this, true, "Performing backup...");
			ld.setProgressBarIsFake(true);
			SwingWorkerUtils.executeJob((() -> {
				final ProjectBackupConfig.BackupInfo newBkup = cm.getBackupSystem().createNewBackup(result, false);
				SwingUtilities.invokeLater((() -> {
					ld.setVisible(false);
					if (newBkup != null) {
						backupList.addElement(0, new BackupEntry(newBkup, this));
					}
				}));
			}));
			ld.setVisible(true);
			return true;

		}
		return false;
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backupListSP = new javax.swing.JScrollPane();
        backupList = new xstandard.gui.components.ComponentList<>();
        additionalSettingsSep = new javax.swing.JSeparator();
        curPlaytimeLabel = new javax.swing.JLabel();
        curPlaytime = new javax.swing.JLabel();
        btnEnableAutoBackup = new javax.swing.JCheckBox();
        backupPeriodSelector = new xstandard.gui.components.TimePeriodSelector();
        backupCtrlSeparator = new javax.swing.JSeparator();
        btnNewBackup = new javax.swing.JButton();
        btnDeleteOldBackups = new javax.swing.JButton();
        oldBackupDeleteLabel = new javax.swing.JLabel();
        oldBackupPeriodSelector = new xstandard.gui.components.TimePeriodSelector();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Backup and Restore");

        backupListSP.setViewportView(backupList);

        curPlaytimeLabel.setText("Current playtime:");

        curPlaytime.setText("-");

        btnEnableAutoBackup.setText("Automatic backups every");
        btnEnableAutoBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEnableAutoBackupActionPerformed(evt);
            }
        });

        btnNewBackup.setText("New backup");
        btnNewBackup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewBackupActionPerformed(evt);
            }
        });

        btnDeleteOldBackups.setText("Delete");
        btnDeleteOldBackups.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteOldBackupsActionPerformed(evt);
            }
        });

        oldBackupDeleteLabel.setText("all backups older than");

        oldBackupPeriodSelector.setHourValue(168);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backupListSP)
                    .addComponent(additionalSettingsSep)
                    .addComponent(backupCtrlSeparator)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(curPlaytimeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(curPlaytime, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEnableAutoBackup, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(backupPeriodSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnNewBackup, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnDeleteOldBackups, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(oldBackupDeleteLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(oldBackupPeriodSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backupListSP, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backupCtrlSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnNewBackup)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(btnDeleteOldBackups, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(oldBackupDeleteLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(oldBackupPeriodSelector, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(additionalSettingsSep, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backupPeriodSelector, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(curPlaytimeLabel)
                        .addComponent(curPlaytime)
                        .addComponent(btnEnableAutoBackup, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnEnableAutoBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEnableAutoBackupActionPerformed
		setAutoBkUpEnabled();
    }//GEN-LAST:event_btnEnableAutoBackupActionPerformed

    private void btnNewBackupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewBackupActionPerformed
		createNewBackup();
    }//GEN-LAST:event_btnNewBackupActionPerformed

    private void btnDeleteOldBackupsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteOldBackupsActionPerformed
		List<BackupEntry> entriesToRemove = new ArrayList<>();
		long maximumLifeExpectancy = oldBackupPeriodSelector.getSelectedMillisValue();
		for (BackupEntry be : backupList) {
			if (be.backupInfo.getAge() > maximumLifeExpectancy) {
				entriesToRemove.add(be);
			}
		}
		Collections.reverse(entriesToRemove); //sort oldest to newest

		if (!entriesToRemove.isEmpty()) {
			if (DialogUtils.showYesNoDialog(this,
				"Are you sure?", entriesToRemove.size() + " backups will be removed. Continue?"
				+ "\n"
				+ "\nOldest backup: " + entriesToRemove.get(0).backupInfo.path
				+ "\nNewest backup: " + entriesToRemove.get(entriesToRemove.size() - 1).backupInfo.path)) {
				removeBackupEntriesImpl(entriesToRemove.toArray(new BackupEntry[entriesToRemove.size()]));
			}
		} else {
			DialogUtils.showInfoMessage(this, "Nothing to do", "There aren't any old enough backups.");
		}
    }//GEN-LAST:event_btnDeleteOldBackupsActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JSeparator additionalSettingsSep;
    private javax.swing.JSeparator backupCtrlSeparator;
    private xstandard.gui.components.ComponentList<BackupEntry> backupList;
    private javax.swing.JScrollPane backupListSP;
    private xstandard.gui.components.TimePeriodSelector backupPeriodSelector;
    private javax.swing.JButton btnDeleteOldBackups;
    private javax.swing.JCheckBox btnEnableAutoBackup;
    private javax.swing.JButton btnNewBackup;
    private javax.swing.JLabel curPlaytime;
    private javax.swing.JLabel curPlaytimeLabel;
    private javax.swing.JLabel oldBackupDeleteLabel;
    private xstandard.gui.components.TimePeriodSelector oldBackupPeriodSelector;
    // End of variables declaration//GEN-END:variables
}
