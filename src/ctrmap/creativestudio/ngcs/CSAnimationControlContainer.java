package ctrmap.creativestudio.ngcs;

import ctrmap.renderer.scene.animation.AbstractAnimationController;
import xstandard.util.ListenableList;
import ctrmap.util.gui.AnimationControl;
import java.awt.Dimension;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;

public class CSAnimationControlContainer extends javax.swing.JPanel {

	public final List<AnimationControl> controls = new ArrayList<>();
	private JLabel dmyEmptyLabel = new JLabel("No animations playing");

	private ListenableList.ElementChangeListener listListener = new ListenableList.ElementChangeListener() {
		@Override
		public void onEntityChange(ListenableList.ElementChangeEvent evt) {
			SwingUtilities.invokeLater((() -> {
				AbstractAnimationController ctrl = (AbstractAnimationController) evt.element;

				switch (evt.type) {
					case ADD:
						addControl(ctrl);
						break;
					case REMOVE:
						removeControl(ctrl);
						break;
				}
			}));
		}
	};

	public CSAnimationControlContainer() {
		initComponents();
		dmyEmptyLabel.setAlignmentX(0.5f);
		dmyEmptyLabel.setAlignmentY(0.5f);
		dmyEmptyLabel.setHorizontalAlignment(JLabel.CENTER);
		dmyEmptyLabel.setVerticalAlignment(JLabel.CENTER);
		dmyEmptyLabel.setHorizontalTextPosition(JLabel.CENTER);
		dmyEmptyLabel.setVerticalTextPosition(JLabel.CENTER);
		dmyEmptyLabel.setMaximumSize(new Dimension(Integer.MAX_VALUE, Integer.MAX_VALUE));

		addEmptyLabelIfEmpty();
	}

	public void bindAnimationControllerList(ListenableList<AbstractAnimationController> list) {
		list.addListener(listListener);
		for (AbstractAnimationController c : list) {
			addControl(c);
		}
	}
	
	public void unbindAnimationControllerList(ListenableList<AbstractAnimationController> list) {
		list.removeListener(listListener);
		for (AbstractAnimationController c : list) {
			removeControl(c);
		}
	}

	public void updateAllControls() {
		for (AnimationControl c : controls) {
			c.update();
		}
	}

	public void addControl(AbstractAnimationController controller) {
		AnimationControl c = new AnimationControl(controller);
		controls.add(c);
		remove(dmyEmptyLabel);
		add(c);
		revalidate();
		repaint();
	}

	public void removeControl(AbstractAnimationController controller) {
		for (AnimationControl c : controls) {
			if (c.controller == controller) {
				controls.remove(c);
				remove(c);
				addEmptyLabelIfEmpty();
				break;
			}
		}
		revalidate();
		repaint();
	}

	private void addEmptyLabelIfEmpty() {
		if (controls.isEmpty()) {
			add(dmyEmptyLabel);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
