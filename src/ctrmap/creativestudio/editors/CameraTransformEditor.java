package ctrmap.creativestudio.editors;

import ctrmap.creativestudio.ngcs.NGCS;
import ctrmap.creativestudio.ngcs.tree.AnimationNode;
import ctrmap.creativestudio.ngcs.tree.CSNode;
import ctrmap.renderer.scene.Camera;
import ctrmap.renderer.scene.animation.camera.CameraAnimation;
import ctrmap.renderer.scene.animation.camera.CameraBoneTransform;
import ctrmap.renderer.scene.animation.camera.CameraLookAtBoneTransform;
import ctrmap.renderer.scene.animation.camera.CameraViewpointBoneTransform;
import ctrmap.renderer.scene.metadata.ReservedMetaData;
import ctrmap.renderer.util.AnimeProcessor;
import ctrmap.renderer.util.CameraFrameProcessor;
import xstandard.gui.DialogUtils;
import xstandard.gui.components.ComponentUtils;

public class CameraTransformEditor extends javax.swing.JPanel implements IEditor {

	/**
	 * Creates new form SkeletalEditor
	 */
	public CameraTransformEditor() {
		initComponents();

		ComponentUtils.setNFValueClass(Float.class, tempo);
	}

	private CSNode node;
	private CameraBoneTransform bt;

	@Override
	public void handleObject(Object o) {
		reload();
		if (IEditor.checkIsCompatibleNG(o, CameraBoneTransform.class)) {
			node = (CSNode) o;
			bt = (CameraBoneTransform) node.getContent();
			nameField.loadNode(node);
			btnChangePerspMode.setText((bt instanceof CameraLookAtBoneTransform) ? "Convert to viewpoint" : "Convert to LookAt");
		} else {
			node = null;
			bt = null;
			nameField.loadNode(null);
		}
	}

	@Override
	public void save() {
		//Nothing else. We want the user to explicitly carry out the irreversible operations with "Apply".
	}

	public void reload() {
		tempo.setValue(1f);
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this
	 * code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tempoPanel = new javax.swing.JPanel();
        tempo = new javax.swing.JFormattedTextField();
        btnApplyTempo = new javax.swing.JButton();
        toolsPanel = new javax.swing.JPanel();
        btnChangePerspMode = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        nameField = new ctrmap.creativestudio.editors.NameTextField();

        tempoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tempo"));

        tempo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.000"))));

        btnApplyTempo.setText("Apply");
        btnApplyTempo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApplyTempoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tempoPanelLayout = new javax.swing.GroupLayout(tempoPanel);
        tempoPanel.setLayout(tempoPanelLayout);
        tempoPanelLayout.setHorizontalGroup(
            tempoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tempoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tempoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tempo)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tempoPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnApplyTempo)))
                .addContainerGap())
        );
        tempoPanelLayout.setVerticalGroup(
            tempoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tempoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tempo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApplyTempo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        toolsPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tools"));

        btnChangePerspMode.setText("Convert to LookAt");
        btnChangePerspMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangePerspModeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout toolsPanelLayout = new javax.swing.GroupLayout(toolsPanel);
        toolsPanel.setLayout(toolsPanelLayout);
        toolsPanelLayout.setHorizontalGroup(
            toolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnChangePerspMode, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );
        toolsPanelLayout.setVerticalGroup(
            toolsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(toolsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnChangePerspMode)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Name"));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nameField, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(nameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(toolsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tempoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tempoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(toolsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnApplyTempoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApplyTempoActionPerformed
		if (bt != null) {
			float v = 1f / (Float) tempo.getValue();
			if (v != 0) {
				AnimeProcessor.applyTempoScale(bt, v);
			}
			tempo.setValue(1f);
		}
    }//GEN-LAST:event_btnApplyTempoActionPerformed

    private void btnChangePerspModeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangePerspModeActionPerformed
		if (bt != null) {
			CameraAnimation parent = (CameraAnimation) node.descend(AnimationNode.class).getContent();
			if (parent != null) {
				Camera cam = node.getCS().callCameraSelect();
				if (cam == null) {
					DialogUtils.showErrorMessage(this, "No cameras available", "Animation processing requires a reference camera, however, none are currently available.");
				} else {
					CameraBoneTransform newBT = null;
					if (bt instanceof CameraViewpointBoneTransform) {
						if (cam.mode != Camera.Mode.PERSPECTIVE) {
							DialogUtils.showErrorMessage(this, "Incompatible camera", "This is not a rotation perspective camera!");
						} else {
							newBT = CameraFrameProcessor.viewpointToLookat((CameraViewpointBoneTransform) bt, cam, parent.frameCount);
						}
					} else if (bt instanceof CameraLookAtBoneTransform) {
						if (cam.mode != Camera.Mode.LOOKAT) {
							DialogUtils.showErrorMessage(this, "Incompatible camera", "This is not a look-at camera!");
						} else {
							newBT = CameraFrameProcessor.lookatToViewpoint((CameraLookAtBoneTransform) bt, cam, parent.frameCount);
						}
					}
					if (newBT != null) {
						int oldIdx = parent.transforms.indexOf(bt);
						if (oldIdx != -1) {
							node.setContent(newBT);
							parent.transforms.setModify(oldIdx, newBT);
							handleObject(node);
						}
					}
				}
			}
		}
    }//GEN-LAST:event_btnChangePerspModeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnApplyTempo;
    private javax.swing.JButton btnChangePerspMode;
    private javax.swing.JPanel jPanel1;
    private ctrmap.creativestudio.editors.NameTextField nameField;
    private javax.swing.JFormattedTextField tempo;
    private javax.swing.JPanel tempoPanel;
    private javax.swing.JPanel toolsPanel;
    // End of variables declaration//GEN-END:variables
}
